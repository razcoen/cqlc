package golang

import (
	"bytes"
	"testing"

	"github.com/razcoen/cqlc/pkg/cqlc/codegen/sdk"
	"github.com/razcoen/cqlc/pkg/cqlc/gocqlhelpers"
	"github.com/stretchr/testify/require"
)

func TestGoGenerator(t *testing.T) {
	tests := []struct {
		name           string
		keyspace       *sdk.Keyspace
		packageName    string
		expectedErr    bool
		expectedOutput string
	}{
		{
			name:        "Empty Keyspace",
			keyspace:    &sdk.Keyspace{Name: "empty_keyspace"},
			packageName: "empty",
			expectedErr: false,
			expectedOutput: `// Code generated by cqlc. DO NOT EDIT.

package empty
`,
		},
		{
			name: "Keyspace with Single Table",
			keyspace: &sdk.Keyspace{
				Name: "single_table_keyspace",
				Tables: []*sdk.Table{
					{
						Name: "users",
						Columns: []*sdk.Column{
							{Name: "id", DataType: gocqlhelpers.NewTypeUUID()},
							{Name: "name", DataType: gocqlhelpers.NewTypeText()},
							{Name: "age", DataType: gocqlhelpers.NewTypeInt()},
						},
					},
				},
			},
			packageName: "single",
			expectedErr: false,
			expectedOutput: `// Code generated by cqlc. DO NOT EDIT.

package single

import (
	"github.com/gocql/gocql"
)

// Table: users
type User struct {
	ID   gocql.UUID
	Name string
	Age  int
}
`,
		},
		{
			name: "Keyspace with Multiple Tables",
			keyspace: &sdk.Keyspace{
				Name: "multi_table_keyspace",
				Tables: []*sdk.Table{
					{
						Name: "users",
						Columns: []*sdk.Column{
							{Name: "id", DataType: gocqlhelpers.NewTypeUUID()},
							{Name: "name", DataType: gocqlhelpers.NewTypeText()},
						},
					},
					{
						Name: "orders",
						Columns: []*sdk.Column{
							{Name: "order_id", DataType: gocqlhelpers.NewTypeUUID()},
							{Name: "user_id", DataType: gocqlhelpers.NewTypeUUID()},
							{Name: "amount", DataType: gocqlhelpers.NewTypeDecimal()},
							{Name: "created_at", DataType: gocqlhelpers.NewTypeTimestamp()},
						},
					},
				},
			},
			packageName: "multi",
			expectedErr: false,
			expectedOutput: `// Code generated by cqlc. DO NOT EDIT.

package multi

import (
	"github.com/gocql/gocql"
	"gopkg.in/inf.v0"
	"time"
)

// Table: users
type User struct {
	ID   gocql.UUID
	Name string
}

// Table: orders
type Order struct {
	OrderID   gocql.UUID
	UserID    gocql.UUID
	Amount    *inf.Dec
	CreatedAt time.Time
}
`,
		},
	}

	// TODO: Test all data types
	gg, err := NewGenerator(nil)
	require.NoError(t, err)

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			buf := &bytes.Buffer{}
			// TODO: Assert response
			_, err := gg.generateKeyspaceStructs(&sdk.Context{}, &generateKeyspaceStructsRequest{
				keyspace:    tt.keyspace,
				packageName: tt.packageName,
				out:         buf,
			})

			if tt.expectedErr {
				require.Error(t, err)
			} else {
				require.NoError(t, err)
				require.Equal(t, tt.expectedOutput, buf.String())
			}
		})
	}
}

func TestCreateHeader(t *testing.T) {
	t.Run("nil context", func(t *testing.T) {
		require.Equal(t, "// Code generated by cqlc. DO NOT EDIT.\n", createHeader(nil))
	})
	t.Run("empty context", func(t *testing.T) {
		require.Equal(t, "// Code generated by cqlc. DO NOT EDIT.\n", createHeader(&sdk.Context{}))
	})
	t.Run("full context", func(t *testing.T) {
		require.Equal(t, `// Code generated by cqlc. DO NOT EDIT.
// cqlc version: v1.0.0-rc-8
// config: cqlc.yaml
// schema: schema.cql
// queries: queries.cql
`, createHeader(&sdk.Context{
			Version:     "v1.0.0-rc-8",
			ConfigPath:  "cqlc.yaml",
			SchemaPath:  "schema.cql",
			QueriesPath: "queries.cql",
		}))
	})
}
