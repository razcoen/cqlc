package cqlc

import (
	"bytes"
	"fmt"
	"github.com/razcoen/cqlc/pkg/gocqlhelpers"
	"github.com/razcoen/cqlc/pkg/strfmt"
	"go/format"
	"io"
	"maps"
	"slices"
	"text/template"
)

type generateKeyspaceRequest struct {
	keyspace    *Keyspace
	packageName string
	out         io.Writer
}

var (
	keyspaceGoTemplate = `// Code generated by cqlc. DO NOT EDIT.

package {{.PackageName}}

{{- if gt (len .Imports) 0}}
import (
{{- end}}
{{- range .Imports}}
  "{{.}}"
{{- end}}
{{- if gt (len .Imports) 0}}
)
{{- end}}
{{range .Structs}}
// Table: {{.TableName}}
type {{.Name}} struct {
  {{- range .Fields }}
  {{ .Name }} {{ .Type }}
  {{- end }}
}
{{end -}}
`
)

type goGenerator struct {
	keyspaceGoTemplate *template.Template
}

func newGoGenerator() (*goGenerator, error) {
	tpl, err := template.New("keyspace-go-template").Parse(keyspaceGoTemplate)
	if err != nil {
		return nil, fmt.Errorf("parse keyspace go template: %w", err)
	}
	return &goGenerator{keyspaceGoTemplate: tpl}, nil
}

type keyspaceGoTemplateValue struct {
	PackageName string
	Imports     []string
	Structs     []struct {
		TableName string
		Name      string
		Fields    []struct {
			Name string
			Type string
		}
	}
}

func (gg *goGenerator) generateKeyspace(req *generateKeyspaceRequest) error {
	v := keyspaceGoTemplateValue{
		PackageName: req.packageName,
		Structs: []struct {
			TableName string
			Name      string
			Fields    []struct {
				Name string
				Type string
			}
		}{},
	}
	imports := make(map[string]bool)
	for _, t := range req.keyspace.Tables {
		name := strfmt.ToSingularPascalCase(t.Name)
		st := struct {
			TableName string
			Name      string
			Fields    []struct {
				Name string
				Type string
			}
		}{
			TableName: t.Name,
			Name:      name,
		}
		for _, c := range t.Columns {
			name := strfmt.ToSingularPascalCase(c.Name)
			goType, err := gocqlhelpers.ParseGoType(c.DataType)
			if err != nil {
				// TODO
				continue
			}
			if goType.ImportPath != "" {
				imports[goType.ImportPath] = true
			}
			st.Fields = append(st.Fields, struct {
				Name string
				Type string
			}{Name: name, Type: goType.Name})
		}
		v.Structs = append(v.Structs, st)
	}
	v.Imports = slices.Collect(maps.Keys(imports))
	buf := &bytes.Buffer{}
	if err := gg.keyspaceGoTemplate.Execute(buf, v); err != nil {
		return fmt.Errorf("execute keyspace template: %w", err)
	}
	out, err := format.Source(buf.Bytes())
	if err != nil {
		return fmt.Errorf("format out: %w", err)
	}
	if _, err := req.out.Write(out); err != nil {
		return fmt.Errorf("write out: %w", err)
	}
	return nil
}
