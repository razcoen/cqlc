// Code generated by cqlc. DO NOT EDIT.
// cqlc version: (devel)
// schema: ../../testdata/basicmigrations
// queries: ../../testdata/basic_migrations_queries.cql

package basicmigrations

import (
	"context"
	"fmt"
	"time"

	"github.com/gocql/gocql"
	"github.com/razcoen/cqlc/pkg/gocqlc"
)

type RecordLoginParams struct {
	UserID    gocql.UUID
	LoginTime time.Time
}

func (c *Client) RecordLogin(ctx context.Context, params *RecordLoginParams, opts ...gocqlc.QueryOption) error {
	session := c.Session()
	q := session.Query("INSERT INTO logins (user_id, login_time) VALUES (?, ?);", params.UserID, params.LoginTime)
	q = q.WithContext(ctx)
	gocqlc.ApplyQueryOptions(q, c.DefaultQueryOptions()...)
	gocqlc.ApplyQueryOptions(q, opts...)
	if err := q.Exec(); err != nil {
		return fmt.Errorf("exec query: %w", err)
	}
	return nil
}

type ListLoginsParams struct {
	UserID gocql.UUID
}

type ListLoginsRow struct {
	LoginTime time.Time
}

func (c *Client) ListLogins(params *ListLoginsParams, opts ...gocqlc.QueryOption) *gocqlc.Querier[ListLoginsRow] {
	session := c.Session()
	q := session.Query("SELECT login_time FROM logins WHERE user_id = ?;", params.UserID)
	scan := func(it *gocql.Iter, dest *ListLoginsRow) bool {
		return it.Scan(&(*dest).LoginTime)
	}
	return gocqlc.NewQuerier(q, scan, c.Logger(), c.DefaultQueryOptions()...)
}
